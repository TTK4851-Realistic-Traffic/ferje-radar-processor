version: 2.1

commands:
  pip_cache:
    description: "Restores the cache of pip dependencies"
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements-frozen.txt" }}
            # Fallbacks to the latest cache
            - v1-dependencies-
  save_pip_cache:
    description: "Persists our cache of pip dependencies"
    steps:
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements-frozen.txt" }}


defaults: &defaults
  docker:
    - image: python:3.8
  working_directory: ~/repo

jobs:
  build-and-test:
    <<: *defaults
    steps:
      - checkout
      - pip_cache
      - run:
          name: Install Dependencies
          command: |
            pip3 install virtualenv
            virtualenv venv --python=python3.8
            source ./venv/bin/activate
            pip3 install -r requirements-frozen.txt
      - save_pip_cache
      - run:
          command: echo "Hello world"
          name: Test
  push-docker-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Install AWS-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Docker Login to ECR
          environment:
            # Set default region here to prevent circleci from masking us-east-1 in terraform plans
            AWS_DEFAULT_REGION: us-east-1
            ECR_BASE_URL: "314397620259.dkr.ecr.us-east-1.amazonaws.com"
          command: aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_BASE_URL
      - run:
          name: Build
          environment:
            # Set default region here to prevent circleci from masking us-east-1 in terraform plans
            AWS_DEFAULT_REGION: us-east-1
            ECR_BASE_URL: "314397620259.dkr.ecr.us-east-1.amazonaws.com"
          command: docker build -t $ECR_BASE_URL/ferje-radar-processor-prod:$CIRCLE_SHA1 .
      - run:
          name: Push
          environment:
            # Set default region here to prevent circleci from masking us-east-1 in terraform plans
            AWS_DEFAULT_REGION: us-east-1
            ECR_BASE_URL: "314397620259.dkr.ecr.us-east-1.amazonaws.com"
          command: docker push $ECR_BASE_URL/ferje-radar-processor-prod:$CIRCLE_SHA1
  plan-production:
    docker:
      - image: lindhagen/terraform-azure-util:0.14.3
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          command: export AWS_DEFAULT_REGION=us-east-1
      - run:
          name: Set docker image tag
          command: export TF_ENV_docker_image_tag=${CIRCLE_SHA1}
      - run:
          name: terraform init & plan
          environment:
            # Set default region here to prevent circleci from masking us-east-1 in terraform plans
            AWS_DEFAULT_REGION: us-east-1
            ECR_BASE_URL: "314397620259.dkr.ecr.us-east-1.amazonaws.com"
          command: |
            cd terraform/prod
            terraform init -input=false
            terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
  apply-production:
    docker:
      - image: lindhagen/terraform-azure-util:0.14.3
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Set docker image tag
          command: export TF_ENV_docker_image_tag=${CIRCLE_SHA1}
      - run:
          name: Terraform apply
          environment:
            # Set default region here to prevent circleci from masking us-east-1 in terraform plans
            AWS_DEFAULT_REGION: us-east-1
            ECR_BASE_URL: "314397620259.dkr.ecr.us-east-1.amazonaws.com"
          command: |
            cd terraform/prod
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .


workflows:
  main:
    jobs:
#      - build-and-test
      - push-docker-image:
          context:
            - Ferje Context
          filters:
            branches:
              only: master
      - plan-production:
          context:
            - Ferje Context
      - apply-production:
          context:
            - Ferje Context
          requires:
            - push-docker-image
            - plan-production
          filters:
            branches:
              only: main